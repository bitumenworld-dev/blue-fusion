package com.bitumen.bluefusion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractDivisionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractDivisionAllPropertiesEquals(ContractDivision expected, ContractDivision actual) {
        assertContractDivisionAutoGeneratedPropertiesEquals(expected, actual);
        assertContractDivisionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractDivisionAllUpdatablePropertiesEquals(ContractDivision expected, ContractDivision actual) {
        assertContractDivisionUpdatableFieldsEquals(expected, actual);
        assertContractDivisionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractDivisionAutoGeneratedPropertiesEquals(ContractDivision expected, ContractDivision actual) {
        assertThat(actual)
            .as("Verify ContractDivision auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractDivisionUpdatableFieldsEquals(ContractDivision expected, ContractDivision actual) {
        assertThat(actual)
            .as("Verify ContractDivision relevant properties")
            .satisfies(a -> assertThat(a.getContractDivisionId()).as("check contractDivisionId").isEqualTo(expected.getContractDivisionId())
            )
            .satisfies(a ->
                assertThat(a.getContractDivisionNumber()).as("check contractDivisionNumber").isEqualTo(expected.getContractDivisionNumber())
            )
            .satisfies(a -> assertThat(a.getCompanyId()).as("check companyId").isEqualTo(expected.getCompanyId()))
            .satisfies(a ->
                assertThat(a.getBuildSmartReference()).as("check buildSmartReference").isEqualTo(expected.getBuildSmartReference())
            )
            .satisfies(a -> assertThat(a.getShiftStart()).as("check shiftStart").isEqualTo(expected.getShiftStart()))
            .satisfies(a -> assertThat(a.getShiftEnd()).as("check shiftEnd").isEqualTo(expected.getShiftEnd()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCompleted()).as("check completed").isEqualTo(expected.getCompleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractDivisionUpdatableRelationshipsEquals(ContractDivision expected, ContractDivision actual) {
        // empty method
    }
}
