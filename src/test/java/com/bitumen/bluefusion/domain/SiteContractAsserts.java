package com.bitumen.bluefusion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SiteContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteContractAllPropertiesEquals(SiteContract expected, SiteContract actual) {
        assertSiteContractAutoGeneratedPropertiesEquals(expected, actual);
        assertSiteContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteContractAllUpdatablePropertiesEquals(SiteContract expected, SiteContract actual) {
        assertSiteContractUpdatableFieldsEquals(expected, actual);
        assertSiteContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteContractAutoGeneratedPropertiesEquals(SiteContract expected, SiteContract actual) {
        assertThat(actual)
            .as("Verify SiteContract auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteContractUpdatableFieldsEquals(SiteContract expected, SiteContract actual) {
        assertThat(actual)
            .as("Verify SiteContract relevant properties")
            .satisfies(a -> assertThat(a.getSiteContractId()).as("check siteContractId").isEqualTo(expected.getSiteContractId()))
            .satisfies(a -> assertThat(a.getSiteId()).as("check siteId").isEqualTo(expected.getSiteId()))
            .satisfies(a -> assertThat(a.getContractId()).as("check contractId").isEqualTo(expected.getContractId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSiteContractUpdatableRelationshipsEquals(SiteContract expected, SiteContract actual) {
        // empty method
    }
}
