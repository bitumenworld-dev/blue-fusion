package com.bitumen.bluefusion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FuelTransactionLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelTransactionLineAllPropertiesEquals(FuelTransactionLine expected, FuelTransactionLine actual) {
        assertFuelTransactionLineAutoGeneratedPropertiesEquals(expected, actual);
        assertFuelTransactionLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelTransactionLineAllUpdatablePropertiesEquals(FuelTransactionLine expected, FuelTransactionLine actual) {
        assertFuelTransactionLineUpdatableFieldsEquals(expected, actual);
        assertFuelTransactionLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelTransactionLineAutoGeneratedPropertiesEquals(FuelTransactionLine expected, FuelTransactionLine actual) {
        assertThat(actual)
            .as("Verify FuelTransactionLine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelTransactionLineUpdatableFieldsEquals(FuelTransactionLine expected, FuelTransactionLine actual) {
        assertThat(actual)
            .as("Verify FuelTransactionLine relevant properties")
            .satisfies(a ->
                assertThat(a.getFuelTransactionLineId()).as("check fuelTransactionLineId").isEqualTo(expected.getFuelTransactionLineId())
            )
            .satisfies(a ->
                assertThat(a.getFuelTransactionHeaderId())
                    .as("check fuelTransactionHeaderId")
                    .isEqualTo(expected.getFuelTransactionHeaderId())
            )
            .satisfies(a -> assertThat(a.getAssetPlantId()).as("check assetPlantId").isEqualTo(expected.getAssetPlantId()))
            .satisfies(a -> assertThat(a.getContractDivisionId()).as("check contractDivisionId").isEqualTo(expected.getContractDivisionId())
            )
            .satisfies(a -> assertThat(a.getIssuanceTypeId()).as("check issuanceTypeId").isEqualTo(expected.getIssuanceTypeId()))
            .satisfies(a -> assertThat(a.getPumpId()).as("check pumpId").isEqualTo(expected.getPumpId()))
            .satisfies(a -> assertThat(a.getStorageUnitId()).as("check storageUnitId").isEqualTo(expected.getStorageUnitId()))
            .satisfies(a -> assertThat(a.getLitres()).as("check litres").isEqualTo(expected.getLitres()))
            .satisfies(a -> assertThat(a.getMeterReadingStart()).as("check meterReadingStart").isEqualTo(expected.getMeterReadingStart()))
            .satisfies(a -> assertThat(a.getMeterReadingEnd()).as("check meterReadingEnd").isEqualTo(expected.getMeterReadingEnd()))
            .satisfies(a -> assertThat(a.getMultiplier()).as("check multiplier").isEqualTo(expected.getMultiplier()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelTransactionLineUpdatableRelationshipsEquals(FuelTransactionLine expected, FuelTransactionLine actual) {
        // empty method
    }
}
