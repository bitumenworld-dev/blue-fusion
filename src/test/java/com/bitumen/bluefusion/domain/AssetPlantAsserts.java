//package com.bitumen.bluefusion.domain;
//
//import static org.assertj.core.api.Assertions.assertThat;
//
//public class AssetPlantAsserts {
//
//    /**
//     * Asserts that the entity has all properties (fields/relationships) set.
//     *
//     * @param expected the expected entity
//     * @param actual the actual entity
//     */
//    public static void assertAssetPlantAllPropertiesEquals(AssetPlant expected, AssetPlant actual) {
//        assertAssetPlantAutoGeneratedPropertiesEquals(expected, actual);
//        assertAssetPlantAllUpdatablePropertiesEquals(expected, actual);
//    }
//
//    /**
//     * Asserts that the entity has all updatable properties (fields/relationships) set.
//     *
//     * @param expected the expected entity
//     * @param actual the actual entity
//     */
//    public static void assertAssetPlantAllUpdatablePropertiesEquals(AssetPlant expected, AssetPlant actual) {
//        assertAssetPlantUpdatableFieldsEquals(expected, actual);
//        assertAssetPlantUpdatableRelationshipsEquals(expected, actual);
//    }
//
//    /**
//     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
//     *
//     * @param expected the expected entity
//     * @param actual the actual entity
//     */
//    public static void assertAssetPlantAutoGeneratedPropertiesEquals(AssetPlant expected, AssetPlant actual) {
//        assertThat(actual)
//            .as("Verify AssetPlant auto generated properties")
//            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
//    }
//
//    /**
//     * Asserts that the entity has all the updatable fields set.
//     *
//     * @param expected the expected entity
//     * @param actual the actual entity
//     */
//    public static void assertAssetPlantUpdatableFieldsEquals(AssetPlant expected, AssetPlant actual) {
//        assertThat(actual)
//            .as("Verify AssetPlant relevant properties")
//            .satisfies(a -> assertThat(a.getAssetPlantId()).as("check assetPlantId").isEqualTo(expected.getAssetPlantId()))
//            .satisfies(a -> assertThat(a.getFleetNumber()).as("check fleetNumber").isEqualTo(expected.getFleetNumber()))
//            .satisfies(a -> assertThat(a.getNumberPlate()).as("check numberPlate").isEqualTo(expected.getNumberPlate()))
//            .satisfies(a -> assertThat(a.getFleetDescription()).as("check fleetDescription").isEqualTo(expected.getFleetDescription()))
//            .satisfies(a -> assertThat(a.getOwnerId()).as("check ownerId").isEqualTo(expected.getOwnerId()))
//            .satisfies(a ->
//                assertThat(a.getAccessibleByCompany()).as("check accessibleByCompany").isEqualTo(expected.getAccessibleByCompany())
//            )
//            .satisfies(a -> assertThat(a.getDriverOrOperator()).as("check driverOrOperator").isEqualTo(expected.getDriverOrOperator()))
//            .satisfies(a -> assertThat(a.getPlantCategoryId()).as("check plantCategoryId").isEqualTo(expected.getPlantCategoryId()))
//            .satisfies(a -> assertThat(a.getPlantSubcategoryId()).as("check plantSubcategoryId").isEqualTo(expected.getPlantSubcategoryId())
//            )
//            .satisfies(a -> assertThat(a.getManufacturerId()).as("check manufacturerId").isEqualTo(expected.getManufacturerId()))
//            .satisfies(a -> assertThat(a.getModelId()).as("check modelId").isEqualTo(expected.getModelId()))
//            .satisfies(a -> assertThat(a.getYearOfManufacture()).as("check yearOfManufacture").isEqualTo(expected.getYearOfManufacture()))
//            .satisfies(a -> assertThat(a.getColour()).as("check colour").isEqualTo(expected.getColour()))
//            .satisfies(a -> assertThat(a.getHorseOrTrailer()).as("check horseOrTrailer").isEqualTo(expected.getHorseOrTrailer()))
//            .satisfies(a -> assertThat(a.getSmrReaderType()).as("check smrReaderType").isEqualTo(expected.getSmrReaderType()))
//            .satisfies(a -> assertThat(a.getCurrentSmrIndex()).as("check currentSmrIndex").isEqualTo(expected.getCurrentSmrIndex()))
//            .satisfies(a -> assertThat(a.getEngineNumber()).as("check engineNumber").isEqualTo(expected.getEngineNumber()))
//            .satisfies(a -> assertThat(a.getEngineCapacityCc()).as("check engineCapacityCc").isEqualTo(expected.getEngineCapacityCc()))
//            .satisfies(a -> assertThat(a.getCurrentSiteId()).as("check currentSiteId").isEqualTo(expected.getCurrentSiteId()))
//            .satisfies(a -> assertThat(a.getCurrentContractId()).as("check currentContractId").isEqualTo(expected.getCurrentContractId()))
//            .satisfies(a -> assertThat(a.getCurrentOperatorId()).as("check currentOperatorId").isEqualTo(expected.getCurrentOperatorId()))
//            .satisfies(a -> assertThat(a.getLedgerCode()).as("check ledgerCode").isEqualTo(expected.getLedgerCode()))
//            .satisfies(a -> assertThat(a.getFuelType()).as("check fuelType").isEqualTo(expected.getFuelType()))
//            .satisfies(a -> assertThat(a.getTankCapacityLitres()).as("check tankCapacityLitres").isEqualTo(expected.getTankCapacityLitres())
//            )
//            .satisfies(a -> assertThat(a.getConsumptionUnit()).as("check consumptionUnit").isEqualTo(expected.getConsumptionUnit()))
//            .satisfies(a -> assertThat(a.getPlantHoursStatus()).as("check plantHoursStatus").isEqualTo(expected.getPlantHoursStatus()))
//            .satisfies(a -> assertThat(a.getIsPrimeMover()).as("check isPrimeMover").isEqualTo(expected.getIsPrimeMover()))
//            .satisfies(a -> assertThat(a.getCapacityTons()).as("check capacityTons").isEqualTo(expected.getCapacityTons()))
//            .satisfies(a -> assertThat(a.getCapacityM3Loose()).as("check capacityM3Loose").isEqualTo(expected.getCapacityM3Loose()))
//            .satisfies(a -> assertThat(a.getCapacityM3Tight()).as("check capacityM3Tight").isEqualTo(expected.getCapacityM3Tight()))
//            .satisfies(a -> assertThat(a.getMaximumConsumption()).as("check maximumConsumption").isEqualTo(expected.getMaximumConsumption())
//            )
//            .satisfies(a -> assertThat(a.getMinimumConsumption()).as("check minimumConsumption").isEqualTo(expected.getMinimumConsumption())
//            )
//            .satisfies(a ->
//                assertThat(a.getMaximumSmrOnFullTank()).as("check maximumSmrOnFullTank").isEqualTo(expected.getMaximumSmrOnFullTank())
//            )
//            .satisfies(a -> assertThat(a.getTrackConsumption()).as("check trackConsumption").isEqualTo(expected.getTrackConsumption()))
//            .satisfies(a -> assertThat(a.getTrackSmrReading()).as("check trackSmrReading").isEqualTo(expected.getTrackSmrReading()))
//            .satisfies(a -> assertThat(a.getTrackService()).as("check trackService").isEqualTo(expected.getTrackService()))
//            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
//            .satisfies(a ->
//                assertThat(a.getRequestWeeklyMileage()).as("check requestWeeklyMileage").isEqualTo(expected.getRequestWeeklyMileage())
//            )
//            .satisfies(a -> assertThat(a.getSent()).as("check sent").isEqualTo(expected.getSent()))
//            .satisfies(a -> assertThat(a.getChassisNumber()).as("check chassisNumber").isEqualTo(expected.getChassisNumber()))
//            .satisfies(a -> assertThat(a.getCurrentLocation()).as("check currentLocation").isEqualTo(expected.getCurrentLocation()));
//    }
//
//    /**
//     * Asserts that the entity has all the updatable relationships set.
//     *
//     * @param expected the expected entity
//     * @param actual the actual entity
//     */
//    public static void assertAssetPlantUpdatableRelationshipsEquals(AssetPlant expected, AssetPlant actual) {
//        // empty method
//    }
//}
